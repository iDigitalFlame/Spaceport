################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
### Spaceport + SMD
## WirePlumber Configuration
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

context.modules = [
    {
        name  = libpipewire-module-rt
        args  = {
            nice.level = -11
        }
        flags = [ ifexists nofail ]
    }
    { name  = libpipewire-module-protocol-native }
    { name  = libpipewire-module-metadata }
]
context.spa-libs = {
    api.alsa.*      = alsa/libspa-alsa
    api.bluez5.*    = bluez5/libspa-bluez5
    api.v4l2.*      = v4l2/libspa-v4l2
    api.libcamera.* = libcamera/libspa-libcamera
    audio.convert.* = audioconvert/libspa-audioconvert
    support.*       = support/libspa-support
}
context.properties = {
    log.level                   = "W"
    mem.mlock-all               = false
    application.name            = "WirePlumber"
    wireplumber.script-engine   = lua-scripting
}

wireplumber.settings = {
    bluetooth.autoswitch-to-headset-profile     = true

    device.restore-routes                       = true
    device.restore-profile                      = true
    device.routes.default-sink-volume           = 0.0
    device.routes.default-source-volume         = 0.0

    linking.allow-moving-streams                = true
    linking.follow-default-target               = true

    monitor.alsa.jack-device                    = false
    monitor.alsa.reserve.priority               = -20,
    monitor.alsa.reserve-application-name       = "WirePlumber"

    monitor.bluez5.roles                        = [ a2dp_sink a2dp_source hfp_hf hfp_ag hsp_hs hsp_ag bap_sink bap_source ]
    monitor.bluez5.headset-roles                = [ hfp_hf hfp_ag hsp_hs hsp_ag ]

    monitor.bluez5.codecs                       = [ sbc sbc_xq aac ldac aptx aptx_hd aptx_ll aptx_ll_duplex faststream faststream_duplex ]

    monitor.bluez5.hfphsp-backend               = "native"
    monitor.bluez5.hfphsp-backend-native-modem  = "none"

    monitor.bluez5.hw-offload-sco               = false

    monitor.bluez5.default.rate                 = 48000
    monitor.bluez5.default.channels             = 2

    monitor.bluez5.enable-msbc                  = true
    monitor.bluez5.enable-sbc-xq                = true
    monitor.bluez5.enable-hw-volume             = true

    monitor.bluez5.dummy-avrcp-player           = true

    node.stream.restore-props                   = true
    node.filter.forward-format                  = false
    node.stream.restore-target                  = true
    node.features.audio.no-dsp                  = false
    node.restore-default-targets                = true
    node.features.audio.control-port            = false
    node.features.audio.monitor-ports           = true
    node.stream.default-capture-volume          = 0.0
    node.stream.default-playback-volume         = 0.0
}
wireplumber.profiles = {
    main = {
        check.no-media-session         = required

        hardware.audio                 = required
        hardware.bluetooth             = required
        hardware.video-capture         = required

        metadata.sm-objects            = required
        metadata.sm-settings           = required

        monitor.alsa                   = required
        monitor.alsa-midi              = disabled
        monitor.alsa.reserve-device    = required

        monitor.bluez                  = required
        monitor.bluez.seat-monitoring  = required
        monitor.bluez-midi             = disabled

        policy.standard                = required
        policy.role-priority-system    = required

        support.dbus                   = required
        support.settings               = required
        support.log-settings           = required
        support.reserve-device         = required
        support.portal-permissionstore = required
        support.logind                 = required
    }
}
wireplumber.components = [
    {
        name      = ensure-no-media-session
        type      = built-in
        provides  = check.no-media-session
    },
    {
        name      = export-core
        type      = built-in
        provides  = support.export-core
    },
    {
        name      = libpipewire-module-client-node
        type      = pw-module
        wants     = [ support.export-core ]
        provides  = pw.client-node
    },
    {
        name      = libpipewire-module-client-device
        type      = pw-module
        wants     = [ support.export-core ]
        provides  = pw.client-device
    },
    {
        name      = libpipewire-module-spa-node-factory
        type      = pw-module
        requires  = [ pw.client-node ]
        provides  = pw.node-factory.spa
    },
    {
        name      = libpipewire-module-adapter
        type      = pw-module
        requires  = [ pw.client-node ]
        provides  = pw.node-factory.adapter
    },
    {
        name      = libwireplumber-module-settings
        type      = module
        provides  = metadata.sm-settings
        arguments = {
            metadata.name = sm-settings
        }
    },
    {
        name      = settings-instance
        type      = built-in
        provides  = support.settings
        arguments = {
            metadata.name = sm-settings
        }
    },
    {
        name      = libwireplumber-module-log-settings
        type      = module
        provides  = support.log-settings
    },
    {
        name      = libwireplumber-module-lua-scripting
        type      = module
        provides  = support.lua-scripting
    },
    {
        name      = libwireplumber-module-standard-event-source
        type      = module
        provides  = support.standard-event-source
    },
    {
        name      = libwireplumber-module-dbus-connection,
        type      = module
        provides  = support.dbus
    }
    {
        name      = libwireplumber-module-portal-permissionstore,
        type      = module
        requires  = [ support.dbus ]
        provides  = support.portal-permissionstore
    },
    {
        name      = libwireplumber-module-reserve-device
        type      = module
        requires  = [ support.dbus ]
        provides  = support.reserve-device
    },
    {
        name      = libwireplumber-module-logind
        type      = module
        provides  = support.logind
    },
    {
        name      = libwireplumber-module-si-node
        type      = module
        provides  = si.node
    },
    {
        name      = libwireplumber-module-si-audio-adapter
        type      = module
        provides  = si.audio-adapter
    },
    {
        name      = libwireplumber-module-si-standard-link
        type      = module
        provides  = si.standard-link
    },
    {
        name      = libwireplumber-module-default-nodes-api
        type      = module
        provides  = api.default-nodes
    },
    {
        name      = libwireplumber-module-mixer-api
        type      = module
        provides  = api.mixer
    },
    {
        name      = libwireplumber-module-file-monitor-api
        type      = module
        provides  = api.file-monitor
    },
    {
        name      = metadata.lua
        type      = script/lua
        provides  = metadata.default
        arguments = {
            metadata.name = default
        }
    },
    {
        name      = metadata.lua
        type      = script/lua
        provides  = metadata.filters
        arguments = {
            metadata.name = filters
        }
    },
    {
        name      = sm-objects.lua
        type      = script/lua
        provides  = metadata.sm-objects
    },
    {
        type      = virtual,
        requires  = [ support.reserve-device ]
        provides  = monitor.alsa.reserve-device
    }
    {
        type      = virtual
        requires  = [ api.file-monitor ]
        provides  = monitor.alsa-midi.monitoring
    },
    {
        type      = virtual
        provides  = monitor.bluez.seat-monitoring
        requires  = [ support.logind ]
    },
    {
        name      = monitors/alsa.lua
        type      = script/lua
        wants     = [ monitor.alsa.reserve-device ]
        requires  = [
            support.export-core,
            pw.client-device
        ]
        provides  = monitor.alsa
    },
    {
        name      = monitors/bluez.lua
        type      = script/lua
        wants     = [ monitor.bluez.seat-monitoring ]
        requires  = [
            support.export-core,
            pw.client-device,
            pw.client-node,
            pw.node-factory.adapter
        ]
        provides  = monitor.bluez
    },
    {
        name      = monitors/bluez-midi.lua
        type      = script/lua
        wants     = [ monitor.bluez.seat-monitoring ]
        requires  = [
            support.export-core,
            pw.client-device,
            pw.client-node,
            pw.node-factory.spa
        ]
        provides  = monitor.bluez-midi
    },
    {
        name      = monitors/alsa-midi.lua,
        type      = script/lua
        wants     = [ monitor.alsa-midi.monitoring ]
        provides  = monitor.alsa-midi
    },
    {
        name      = monitors/v4l2/name-device.lua
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.v4l2-name-device
    },
    {
        name      = monitors/v4l2/create-device.lua,
        type      = script/lua
        requires  = [
            support.export-core,
            pw.client-device,
            support.standard-event-source
        ]
        provides  = hooks.monitor.v4l2-create-device
    }
    {
        name      = monitors/v4l2/name-node.lua,
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.v4l2-name-node
    },
    {
        name      = monitors/v4l2/create-node.lua
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.v4l2-create-node
    },
    {
        type      = virtual,
        wants     = [
            hooks.monitor.v4l2-name-device,
            hooks.monitor.v4l2-create-device,
            hooks.monitor.v4l2-name-node,
            hooks.monitor.v4l2-create-node
        ]
        provides  = monitor.v4l2.hooks
    },
    {
        name      = monitors/v4l2/enumerate-device.lua
        type      = script/lua
        requires  = [
            support.export-core,
            pw.client-device,
            support.standard-event-source,
            monitor.v4l2.hooks
        ]
        provides  = hooks.monitor.v4l2-enumerate-device
    },
    {
        type      = virtual
        wants     = [
            hooks.monitor.v4l2-enumerate-device,
            monitor.v4l2.hooks
        ]
        provides  = monitor.v4l2
    },
    {
        name      = monitors/libcamera/name-device.lua,
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.libcamera-name-device
    },
    {
        name      = monitors/libcamera/create-device.lua
        type      = script/lua
        requires  = [
            support.export-core,
            pw.client-device,
            support.standard-event-source
        ]
        provides  = hooks.monitor.libcamera-create-device
    },
    {
        name      = monitors/libcamera/name-node.lua
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.libcamera-name-node
    },
    {
        name      = monitors/libcamera/create-node.lua
        type      = script/lua
        requires  = [
            support.export-core,
            support.standard-event-source
        ]
        provides  = hooks.monitor.libcamera-create-node
    },
    {
        type      = virtual
        wants     = [
            hooks.monitor.libcamera-name-device,
            hooks.monitor.libcamera-create-device,
            hooks.monitor.libcamera-name-node,
            hooks.monitor.libcamera-create-node
        ]
        provides  = monitor.libcamera.hooks
    },
    {
        name      = monitors/libcamera/enumerate-device.lua
        type      = script/lua
        requires  = [
            support.export-core,
            pw.client-device,
            support.standard-event-source,
            monitor.libcamera.hooks
        ]
        provides  = hooks.monitor.libcamera-enumerate-device
    },
    {
        type      = virtual
        wants     = [
            hooks.monitor.libcamera-enumerate-device,
            monitor.libcamera.hooks
        ]
        provides  = monitor.libcamera
    },
    {
        name      = client/access-default.lua
        type      = script/lua
        provides  = script.client.access-default
    },
    {
        name      = client/access-portal.lua
        type      = script/lua
        requires  = [ support.portal-permissionstore ]
        provides  = script.client.access-portal
    },
    {
        name      = client/access-snap.lua
        type      = script/lua
        provides  = script.client.access-snap
    },
    {
        type      = virtual
        wants     = [
            script.client.access-default,
            script.client.access-portal,
            script.client.access-snap
        ]
        provides  = policy.client.access
    },
    {
        name      = device/select-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.select
    },
    {
        name      = device/find-preferred-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.find-preferred
    },
    {
        name      = device/find-best-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.find-best
    },
    {
        name      = device/state-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.state
    },
    {
        name      = device/apply-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.apply
    },
    {
        name      = device/autoswitch-bluetooth-profile.lua
        type      = script/lua
        provides  = hooks.device.profile.autoswitch-bluetooth
    },
    {
        type      = virtual
        wants     = [
            hooks.device.profile.find-best,
            hooks.device.profile.find-preferred,
            hooks.device.profile.state
        ]
        requires  = [
            hooks.device.profile.select,
            hooks.device.profile.autoswitch-bluetooth,
            hooks.device.profile.apply
        ]
        provides  = policy.device.profile
    },
    {
        name      = device/select-routes.lua
        type      = script/lua
        provides  = hooks.device.routes.select
    },
    {
        name      = device/find-best-routes.lua
        type      = script/lua
        provides  = hooks.device.routes.find-best
    },
    {
        name      = device/state-routes.lua
        type      = script/lua
        provides  = hooks.device.routes.state
    },
    {
        name      = device/apply-routes.lua
        type      = script/lua
        provides  = hooks.device.routes.apply
    },
    {
        type      = virtual
        wants     = [
            hooks.device.routes.find-best,
            hooks.device.routes.state
        ]
        requires  = [
            hooks.device.routes.select,
            hooks.device.routes.apply
        ]
        provides  = policy.device.routes
    },
    {
        name      = default-nodes/rescan.lua
        type      = script/lua
        provides  = hooks.default-nodes.rescan
    },
    {
        name      = default-nodes/find-selected-default-node.lua
        type      = script/lua
        requires  = [ metadata.default ]
        provides  = hooks.default-nodes.find-selected
    },
    {
        name      = default-nodes/find-best-default-node.lua
        type      = script/lua
        provides  = hooks.default-nodes.find-best
    },
    {
        name      = default-nodes/state-default-nodes.lua
        type      = script/lua
        requires  = [ metadata.default ]
        provides  = hooks.default-nodes.state
    },
    {
        name      = default-nodes/apply-default-node.lua
        type      = script/lua
        requires  = [ metadata.default ]
        provides  = hooks.default-nodes.apply
    },
    {
        type      = virtual
        wants     = [
            hooks.default-nodes.find-selected,
            hooks.default-nodes.find-best,
            hooks.default-nodes.state
        ]
        requires  = [
            hooks.default-nodes.rescan,
            hooks.default-nodes.apply
        ]
        provides  = policy.default-nodes
    },

    ## Node configuration hooks
    {
        name      = node/create-item.lua
        type      = script/lua
        requires  = [
            si.audio-adapter,
            si.node
        ]
        provides  = hooks.node.create-session-item
    },
    {
        name      = node/suspend-node.lua
        type      = script/lua
        provides  = hooks.node.suspend
    },
    {
        name      = node/state-stream.lua
        type      = script/lua
        provides  = hooks.stream.state
    },
    {
        name      = node/filter-forward-format.lua
        type      = script/lua
        provides  = hooks.filter.forward-format
    },
    {
        type      = virtual
        wants     = [
            hooks.node.suspend
            hooks.stream.state
            hooks.filter.forward-format
        ]
        requires  = [ hooks.node.create-session-item ]
        provides  = policy.node
    },
    {
        name      = node/software-dsp.lua
        type      = script/lua
        provides  = node.software-dsp
    },
    {
        name      = linking/rescan.lua
        type      = script/lua
        provides  = hooks.linking.rescan
    },
    {
        name      = linking/find-defined-target.lua
        type      = script/lua
        provides  = hooks.linking.target.find-defined
    },
    {
        name      = linking/find-filter-target.lua
        type      = script/lua
        requires  = [ metadata.filters ]
        provides  = hooks.linking.target.find-filter
    },
    {
        name      = linking/find-default-target.lua
        type      = script/lua
        requires  = [ api.default-nodes ]
        provides  = hooks.linking.target.find-default
    },
    {
        name      = linking/find-best-target.lua
        type      = script/lua
        provides  = hooks.linking.target.find-best
    },
    {
        name      = linking/get-filter-from-target.lua
        type      = script/lua
        requires  = [ metadata.filters ]
        provides  = hooks.linking.target.get-filter-from
    },
    {
        name      = linking/prepare-link.lua
        type      = script/lua
        requires  = [ api.default-nodes ]
        provides  = hooks.linking.target.prepare-link
    },
    {
        name      = linking/link-target.lua
        type      = script/lua
        requires  = [ si.standard-link ]
        provides  = hooks.linking.target.link
    },
    {
        type      = virtual
        wants     = [
            hooks.linking.target.find-defined,
            hooks.linking.target.find-filter,
            hooks.linking.target.find-default,
            hooks.linking.target.find-best,
            hooks.linking.target.get-filter-from
        ]
        requires  = [
            hooks.linking.rescan,
            hooks.linking.target.prepare-link,
            hooks.linking.target.link
        ]
        provides  = policy.linking.standard
    },
    {
        name      = linking/rescan-virtual-links.lua
        type      = script/lua
        requires  = [ api.mixer ]
        provides  = hooks.linking.role-priority-system.links.rescan
    },
    {
        name      = linking/find-virtual-target.lua
        type      = script/lua
        provides  = hooks.linking.role-priority-system.target.find
    },
    {
        type      = virtual
        requires  = [
            policy.linking.standard,
            hooks.linking.role-priority-system.links.rescan,
            hooks.linking.role-priority-system.target.find
        ]
        provides  = policy.linking.role-priority-system
    },
    {
        type      = virtual
        requires  = [
            policy.client.access
            policy.device.profile
            policy.device.routes
            policy.default-nodes
            policy.linking.standard
            policy.node
            support.standard-event-source
        ]
        provides  = policy.standard
    },
    {
        type      = virtual
        wants     = [
            monitor.alsa,
            monitor.alsa-midi
        ]
        provides  = hardware.audio
    },
    {
        type      = virtual
        wants     = [
            monitor.bluez,
            monitor.bluez-midi
        ]
        provides  = hardware.bluetooth
    },
    {
        type      = virtual
        wants     = [
            monitor.v4l2,
            monitor.libcamera
        ]
        provides  = hardware.video-capture
    }
]
wireplumber.components.rules = [
    {
        matches = [
            { type = "script/lua" }
        ]
        actions = {
            merge = {
                requires = [ support.lua-scripting ]
            }
        }
    }
]
wireplumber.settings.schema = {
    bluetooth.use-persistent-storage = {
        type        = "bool"
        default     = true
        description = "Whether to use persistent BT storage or not"
    }
    bluetooth.autoswitch-to-headset-profile = {
        type        = "bool"
        default     = true
        description = "Whether to autoswitch to BT headset profile or not"
    }
    device.restore-profile = {
        type        = "bool"
        default     = true
        description = "Whether to restore device profile or not"
    }
    device.restore-routes = {
        type        = "bool"
        default     = true
        description = "Whether to restore device routes or not"
    }
    device.routes.default-sink-volume = {
        min         = 0.0
        max         = 1.0
        type        = "float"
        default     = 0.064
        description = "The default volume for sink devices"
    }
    device.routes.default-source-volume = {
        min         =  0.0
        max         = 1.0
        type        = "float"
        default     = 1.0
        description = "The default volume for source devices"
    }
    linking.allow-moving-streams = {
        type        = "bool"
        default     = true
        description = "Whether to allow metadata to move streams at runtime or not"
    }
    linking.follow-default-target = {
        type        = "bool"
        default     = true
        description = "Whether to allow streams follow the default device or not"
    }
    monitor.camera-discovery-timeout = {
        min         =  0
        max         = 60000
        type        = "int"
        default     = 100
        description = "The camera discovery timeout in milliseconds"
    }
    node.features.audio.no-dsp = {
        type        = "bool"
        default     = false
        description = "Whether to never convert audio to F32 format or not"
    }
    node.features.audio.monitor-ports = {
        type        = "bool"
        default     = true
        description = "Whether to enable monitor ports on audio nodes or not"
    }
    node.features.audio.control-port = {
        type        = "bool"
        default     = false
        description = "Whether to enable control ports on audio nodes or not"
    }
    node.stream.restore-props = {
        type        = "bool"
        default     = true
        description = "Whether to restore properties on stream nodes or not"
    }
    node.stream.restore-target = {
        type        = "bool"
        default     = true
        description = "Whether to restore target on stream nodes or not"
    }
    node.stream.default-playback-volume = {
        min         =  0.0
        max         = 1.0
        type        = "float"
        default     = 1.0
        description = "The default volume for playback nodes"
    }
    node.stream.default-capture-volume = {
        min         =  0.0
        max         = 1.0
        type        = "float"
        default     = 1.0
        description = "The default volume for capture nodes"
    }
    node.filter.forward-format = {
        type        = "bool"
        default     = false
        description = "Whether to forward format on filter nodes or not"
    }
    node.restore-default-targets = {
        type        = "bool"
        default     = true
        description = "Whether to restore default targets or not"
    }
}
