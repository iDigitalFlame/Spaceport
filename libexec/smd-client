#!/usr/bin/python3
# System Management Daemon - Spaceport
# iDigitalFlame 2018
#
# smd-client
#  Starts the primary processes and threads for the System Management Client.
#
# Usage:
#  smd-client [-s socket_file] [-l log_file] [-n (int)log_level] [-f]
#
#  Starts the system management client. Recommended to be only used by systemd-user or the workspace manager.
#  The "-s" parameter will specify the socket file that is read by the client.
#  The "-l" and "-n" parameters specify options on how the daemon will log. The "-l" parameter is a file path,
#  while the "-n" parameter is a log level specified as an integer. The "-f" parameter will prevent the process from
#  forking into the background, recommended for systemd units or scripts.
#
# Exit Codes:
#  0 - Completion without exceptions or errors.
#  1 - Permissions error or exception occurred while running the daemon.

import sys

sys.path.insert(0, "/opt/spaceport")

from os import fork
from lib.client import Client
from traceback import format_exc
from argparse import ArgumentParser
from lib.constants import LOG_FILE_CLIENT, LOG_LEVEL, LOG_LEVELS, SOCKET, CONFIG_CLIENT


if __name__ == "__main__":
    parameters = ArgumentParser(description="System Management Daemon Client")
    parameters.add_argument(
        "-s",
        required=False,
        type=str,
        action="store",
        metavar="socket",
        dest="socket",
        help="The server socket to connect to.",
        default=SOCKET,
    )
    parameters.add_argument(
        "-l",
        required=False,
        type=str,
        action="store",
        metavar="log_file",
        dest="log_file",
        help="The log file to output to.",
        default=LOG_FILE_CLIENT,
    )
    parameters.add_argument(
        "-n",
        required=False,
        type=str,
        action="store",
        metavar="log_level",
        dest="log_level",
        help="The log level for logging.",
        default=LOG_LEVEL.lower(),
        choices=LOG_LEVELS.keys(),
    )
    parameters.add_argument(
        "-c",
        required=False,
        type=str,
        action="store",
        metavar="config",
        default=CONFIG_CLIENT,
        dest="config",
        help="The path to the client configuration file.",
    )
    parameters.add_argument(
        "-f", action="store_false", help="Don't fork to the background.", dest="fork"
    )
    arguments = parameters.parse_args()
    try:
        pid = 0
        if arguments.fork:
            pid = fork()
        if pid == 0:
            client = Client(
                arguments.config,
                arguments.socket,
                LOG_LEVELS[arguments.log_level],
                arguments.log_file,
            )
            if not client.start():
                print("Client Threaded encountered an Exception, quitting!")
                del client
                sys.exit(1)
            del client
    except KeyboardInterrupt:
        pass
    except Exception:
        print(format_exc(limit=2), file=sys.stderr)
        sys.exit(1)
    sys.exit(0)

# EOF
