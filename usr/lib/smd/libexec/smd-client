#!/usr/bin/python3
################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
### Spaceport + SMD
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# smd-client
#   Entrypoint for the SMD client daemon.
#
# Usage:
#   smd-client [-s socket_file] [-l log_file] [-n log_level] [-f] [-c config_file] [-r]
#
#   Starts the system management client. Recommended to be only used by systemd-user
#   or the workspace manager.
#
# Exit Codes:
#   0 - Completed successfully
#   1 - Error occurred or syntax error

import sys

sys.path.insert(0, "/usr/lib/smd")

from os import fork
from sys import exit
from time import sleep
from lib import Client, print_error
from argparse import ArgumentParser
from lib.constants import LOG_LEVELS
from lib.constants.config import LOG_PATH_CLIENT, LOG_LEVEL, SOCKET, CONFIG_CLIENT


def _fork(args):
    if args.fork:
        try:
            if fork() > 0:
                if args.wait > 0:
                    sleep(args.wait)
                return True
        except OSError as err:
            return print_error("Cannot fork to background!", err)
    if args.wait > 0:
        sleep(args.wait)
    return _main(args)


def _main(args):
    try:
        c = Client(
            args.config,
            args.socket,
            args.log_level,
            args.log_file,
            args.read_only,
            args.journal,
        )
    except Exception as err:
        return print_error("Cannot create the Client instance!", err)
    try:
        if not c.start():
            return print_error("Client encountered an error, quitting!", quit=False)
    except KeyboardInterrupt:
        pass
    except Exception as err:
        return print_error("Error during runtime!", err, False)
    finally:
        c.stop()
        del c
    return True


if __name__ == "__main__":
    p = ArgumentParser(description="System Management Daemon Client")
    p.add_argument(
        "-s",
        type=str,
        dest="socket",
        help="socket to use for messages",
        action="store",
        metavar="socket",
        default=SOCKET,
        required=False,
    )
    p.add_argument(
        "-l",
        type=str,
        dest="log_file",
        help="log file to output to",
        action="store",
        metavar="log_file",
        default=LOG_PATH_CLIENT,
        required=False,
    )
    p.add_argument(
        "-n",
        type=str,
        dest="log_level",
        help="log level for logging",
        action="store",
        metavar="log_level",
        default=LOG_LEVEL.lower(),
        choices=LOG_LEVELS.keys(),
        required=False,
    )
    p.add_argument(
        "-c",
        type=str,
        dest="config",
        help="path to the client configuration file",
        action="store",
        metavar="config",
        default=CONFIG_CLIENT,
        required=False,
    )
    p.add_argument(
        "-w",
        type=int,
        dest="wait",
        help="seconds to wait before startup",
        action="store",
        metavar="wait",
        default=0,
        required=False,
    )
    p.add_argument(
        "-j",
        dest="journal",
        help="format stdout log for journal/syslog",
        action="store_true",
    )
    p.add_argument(
        "-r", dest="read_only", help="do not write to config files", action="store_true"
    )
    p.add_argument(
        "-f", dest="fork", help="do not fork to the background", action="store_false"
    )

    if not _fork(p.parse_args()):
        exit(1)
    exit(0)
