#!/usr/bin/python3
# smd-daemon
#  Starts the primary processes and threads for the System Management Daemon
#
# Usage:
#  smd-daemon [-s socket_file] [-l log_file] [-n (int)log_level]
#
#  Starts the system management daemon. Recommended to be only used by systemd as root.
#  The "-s" parameter will specify the socket file that is used by the daemon. Recommenced to be used only if more than
#  one instance is running to prevent deadlock issues. The "-l" and "-n" parameters specify options on how the daemon
#  will log. The "-l" parameter is a file path, while the "-n" parameter is a log level specified as an integer.
#
# Exit Codes:
#  0 - Completion without exceptions or errors.
#  1 - Permissions error or exception occurred while running the daemon.
#
# System Management Daemon
#
# Copyright (C) 2016 - 2023 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

import sys

sys.path.insert(0, "/usr/lib/smd")

from os import getuid
from lib.server import Server
from lib.util import print_error
from argparse import ArgumentParser
from lib.constants import LOG_PATH_SERVER, LOG_LEVEL, LOG_LEVELS, SOCKET, CONFIG_SERVER


if __name__ == "__main__":
    if getuid() != 0:
        print("Only root may run the daemon!", file=sys.stderr)
        sys.exit(1)

    parameters = ArgumentParser(description="System Management Daemon Server")
    parameters.add_argument(
        "-s",
        type=str,
        dest="socket",
        help="The server socket to host on.",
        action="store",
        metavar="socket",
        default=SOCKET,
        required=False,
    )
    parameters.add_argument(
        "-l",
        type=str,
        dest="log_file",
        help="The log file to output to.",
        action="store",
        metavar="log_file",
        default=LOG_PATH_SERVER,
        required=False,
    )
    parameters.add_argument(
        "-n",
        type=str,
        dest="log_level",
        help="The log level for logging.",
        action="store",
        metavar="log_level",
        default=LOG_LEVEL.lower(),
        choices=LOG_LEVELS.keys(),
        required=False,
    )
    parameters.add_argument(
        "-c",
        type=str,
        dest="config",
        help="The path to the system config file.",
        action="store",
        metavar="config",
        default=CONFIG_SERVER,
        required=False,
    )
    parameters.add_argument(
        "-r", action="store_true", help="Don't write config files.", dest="read_only"
    )

    args = parameters.parse_args()
    try:
        s = Server(
            args.config,
            args.socket,
            LOG_LEVELS[args.log_level],
            args.log_file,
            args.read_only,
        )
        s.start()
    except Exception as err:
        print_error(str(err), err)
    else:
        try:
            s.wait()
        except KeyboardInterrupt:
            s.stop()
        except Exception as err:
            print_error(str(err), err)
        finally:
            del s
    sys.exit(0)
