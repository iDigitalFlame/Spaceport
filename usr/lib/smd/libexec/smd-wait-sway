#!/usr/bin/python3
################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
### Spaceport + SMD
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# smd-wait-sway
#   Waits for the Sway socket to become ready. Used by the smd-client daemon to
#   prevent running until Sway is ready.

import sys

sys.path.insert(0, "/usr/lib/smd")

from glob import glob
from time import sleep
from lib import print_error
from lib.sway import swaymsg
from os import getenv, getuid


def _wait_for_sock(limit=30):
    v = getenv("SWAYSOCK")
    if isinstance(v, str) and len(v) > 0:
        return v
    i, p = 0, f"/var/run/user/{getuid()}/sway-ipc.{getuid()}.*.sock"
    while i < limit:
        sleep(1)
        try:
            g = glob(p, recursive=False)
            if isinstance(g, list) and len(g) > 0:
                return g[0]
            del g
        except OSError:
            pass
        i += 1
    del p, i
    print_error("Cannot find Sway socket!")


if __name__ == "__main__":
    try:
        swaymsg(10, sock=_wait_for_sock())
    except OSError as err:
        print_error("Cannot communicate with Sway!", err)
