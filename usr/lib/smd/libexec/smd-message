#!/usr/bin/python3
################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
### Spaceport + SMD
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# smd-message
#   Allows processes and users to communicate to SMD through Messages.
#
# Usage:
#   smd-message [-s socket_file] [-t wait_seconds] [-t wait_header] [-p json_payload] [-e code] header
#
#   Attempts to connect to the System Management Daemon and send the specified message.
#   If the "-w" argument is specified this command will wait until the supplied header
#   is received
#   when a message is received.
#
# Exit Codes:
#   0 - Send completed successfully or message received (if waiting)
#   1 - Error occurred or syntax error
#   2 - Wait timeout expired (if waiting)
#   N - Other exit codes may be specified with "-e"

import sys

sys.path.insert(0, "/usr/lib/smd")

from sys import exit
from lib.util import nes
from argparse import ArgumentParser
from lib import print_error, send_message
from lib.constants.config import SOCKET, HOOK_TRANSLATIONS


def _main(args):
    if args.translate:
        h = HOOK_TRANSLATIONS.get(args.header.lower())
        if h is None:
            return print_error(f'Value "{args.header}" is not a valid header name!')
        args.header = h
        del h
    if not isinstance(args.header, int):
        try:
            args.header = abs(int(args.header))
        except ValueError as err:
            return print_error("Header must be a valid number!", err)
    try:
        w = args.wait
        if nes(w):
            i = w.find(",")
            if i > 0 and i + 1 < len(w):
                w = (i[0:1], i[1 + 1 :])
            del i
        r = send_message(args.socket, args.header, w, args.timeout, args.payload)
        del w
    except Exception as err:
        return print_error("Cannot send message!", err)
    if args.wait is None:
        return args.exit
    if r is not None:
        if len(r) > 0:
            print(r)
        else:
            print(r.get_header())
        if isinstance(args.exit, int):
            return args.exit
        return 2
    del r
    return args.exit


if __name__ == "__main__":
    p = ArgumentParser(description="System Management Daemon Messager")
    p.add_argument(
        "header",
        type=str,
        help="header to use in integer format",
        action="store",
        metavar="header",
    )
    p.add_argument(
        "-p",
        type=str,
        dest="payload",
        help="payload to send in JSON format",
        action="store",
        metavar="payload",
        required=False,
    )
    p.add_argument(
        "-w",
        type=str,
        dest="wait",
        help="wait for a response with this header",
        action="store",
        default=None,
        required=False,
    )
    p.add_argument(
        "-t",
        type=int,
        dest="timeout",
        help="wait time (in seconds) for sending and response",
        action="store",
        default=0,
        required=False,
    )
    p.add_argument(
        "-s",
        type=str,
        dest="socket",
        help="socket to use for messages",
        action="store",
        default=SOCKET,
        required=False,
    )
    p.add_argument(
        "-u",
        dest="translate",
        help="specify header by it's name",
        action="store_true",
        default=False,
        required=False,
    )
    p.add_argument(
        "-e",
        type=int,
        dest="exit",
        help="exit code to always exit with, regardless of errors",
        action="store",
        default=None,
        required=False,
    )
    e = _main(p.parse_args())
    if isinstance(e, int):
        exit(e)
    exit(0)
