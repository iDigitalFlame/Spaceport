#!/usr/bin/python3
# smd-message
#  Allows processes and users to communicate to the System Management Daemon through commands.
#
# Usage:
#  smd-message [-s socket_file] [-t (int)wait_seconds] [-t (string)wait_header] [-p (string)json_payload] header
#
#  Attempts to connect to the System Management Daemon and send the message specified.
#  If the parameter "-t" is used, "-w" is implied and will be "0" (forever) by default, which waits until a response
#  from the daemon matching the header is received.
#  This command will also output the header and JSON payload (if included) when a message is received.
#
# Exit Codes:
#  0 - Completion/Received message response (if waiting)
#  1 - Error in parameters or syntax
#  2 - The wait timeout expired (if waiting)
#
# System Management Daemon
#
# Copyright (C) 2016 - 2023 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

import sys

sys.path.insert(0, "/usr/lib/smd")

from lib.util import print_error
from argparse import ArgumentParser
from lib.structs.message import send_message
from lib.constants import SOCKET, HOOK_TRANSLATIONS


def _main(args):
    if args.timeout > 0 and args.wait is None:
        return print_error('You must specify a wait timeout with "-w"!')
    if args.translate:
        if args.header.lower() in HOOK_TRANSLATIONS:
            args.header = HOOK_TRANSLATIONS[args.header.lower()]
        else:
            return print_error(
                f'Name "{args.header}" does not resolve to a valid header!'
            )
    try:
        args.header = int(args.header)
    except ValueError as err:
        return print_error("Header must be an Integer!", err)
    try:
        w = args.wait
        if isinstance(w, str) and "," in w:
            w = [w.strip() for w in w.split(",")]
        r = send_message(args.socket, args.header, w, args.timeout, args.payload)
    except Exception as err:
        return print_error(str(err), err)
    if args.wait is None:
        return True
    if r is not None:
        if len(r) > 0:
            print(r)
        else:
            print(r.get_header())
    del r
    return False


if __name__ == "__main__":
    parameters = ArgumentParser(description="System Management Daemon Messager")
    parameters.add_argument(
        "header",
        type=str,
        help="Message header to send.",
        action="store",
        metavar="header",
    )
    parameters.add_argument(
        "-p",
        type=str,
        dest="payload",
        help="Send a message to the daemon with this JSON payload.",
        action="store",
        metavar="payload",
        required=False,
    )
    parameters.add_argument(
        "-w",
        type=str,
        dest="wait",
        help="Send a message to the daemon and wait for this response header.",
        action="store",
        default=None,
        required=False,
    )
    parameters.add_argument(
        "-t",
        type=int,
        dest="timeout",
        help="Specify wait time (in seconds) to wait (implies -w).",
        action="store",
        default=0,
        required=False,
    )
    parameters.add_argument(
        "-s",
        type=str,
        dest="socket",
        help="Specify socket to connect to.",
        action="store",
        default=SOCKET,
        required=False,
    )
    parameters.add_argument(
        "-u",
        action="store_true",
        default=False,
        required=False,
        dest="translate",
        help="Translate hook header before sending.",
    )
    if not _main(parameters.parse_args()):
        sys.exit(2)
    sys.exit(0)
