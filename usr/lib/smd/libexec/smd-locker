#!/usr/bin/python3
################################
### iDigitalFlame  2016-2024 ###
#                              #
#            -/`               #
#            -yy-   :/`        #
#         ./-shho`:so`         #
#    .:- /syhhhh//hhs` `-`     #
#   :ys-:shhhhhhshhhh.:o- `    #
#   /yhsoshhhhhhhhhhhyho`:/.   #
#   `:yhyshhhhhhhhhhhhhh+hd:   #
#     :yssyhhhhhyhhhhhhhhdd:   #
#    .:.oyshhhyyyhhhhhhddd:    #
#    :o+hhhhhyssyhhdddmmd-     #
#     .+yhhhhyssshdmmddo.      #
#       `///yyysshd++`         #
#                              #
########## SPACEPORT ###########
### Spaceport + SMD
#
# Copyright (C) 2016 - 2024 iDigitalFlame
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#

# smd-locker
#   Script used by swaylock to inform SMD about Blank, Power and Lock events.
#
# Usage:
#   smd-locker [-s socket] [command]
#
#   Discouraged for general usage. The only paramater used may be specified to
#   indicate that this is not a Lockscreen Trigger.

import sys

sys.path.insert(0, "/usr/lib/smd")

from argparse import ArgumentParser
from lib.sway import swaymsg, displays
from lib.constants.config import SOCKET
from lib import print_error, send_message
from lib.constants import HOOK_LOCK, MSG_PRE, MSG_POST, MSG_STATUS


def _main(args):
    if args.command != "power":
        a = MSG_PRE
        if args.command == "blank":
            a = MSG_POST
        elif args.command == "suspend":
            a = MSG_STATUS
        try:
            return send_message(args.socket, HOOK_LOCK, payload={"trigger": a})
        finally:
            del a
    for i in displays():
        if not i.active or i.power:
            continue
        try:
            swaymsg(0, f"output {i.name} power on")
        except Exception as err:
            print_error(f'Cannot set Display "{i.name}" power state!', err, quit=False)


if __name__ == "__main__":
    p = ArgumentParser(description="System Management Daemon Locker Controller")
    p.add_argument(
        "command",
        type=str,
        help="command type to execute",
        nargs="?",
        action="store",
        default="lock",
        choices=["blank", "lock", "power", "suspend"],
        metavar="command",
    )
    p.add_argument(
        "-s",
        type=str,
        dest="socket",
        help="socket to use for messages",
        action="store",
        default=SOCKET,
        required=False,
    )
    try:
        _main(p.parse_args())
    except Exception as err:
        print_error("Error during runtime!", err)
